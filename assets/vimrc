" Disable compatibility with vi which can cause unexpected issues.
set nocompatible

" Enable type file detection. Vim will be able to try to detect the type of file in use.
filetype on

" Enable plugins and load plugin for the detected file type.
filetype plugin on

" Load an indent file for the detected file type.
filetype indent on

" Turn syntax highlighting on.
syntax on

" Add numbers to each line on the left-hand side.
set number

" Allow mouse.
set mouse=a

" Highlight cursor line underneath the cursor horizontally.
set cursorline

" Do not highlight vertical cursor line.
set nocursorcolumn

" Set the color scheme.
colorscheme desert
"colorscheme onedark " Theme is setted after plugins section. 

" Set shift width to 4 spaces.
set shiftwidth=4

" Set tab width to 4 columns.
set tabstop=4

" Do not wrap lines. Allow long lines to extend as far as the line goes.
set nowrap

" While searching though a file incrementally highlight matching characters as you type.
set incsearch

" Ignore capital letters during search.
set ignorecase

" Override the ignorecase option if searching for capital letters.
" This will allow you to search specifically for capital letters.
set smartcase

" Show the mode you are on the last line.
set showmode

" Show matching words during a search.
set showmatch

" Use highlighting when doing a search.
set hlsearch

" Enable auto completion menu after pressing TAB.
set wildmenu

" Make wildmenu behave like similar to Bash completion.
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx,*.o,*.a,*.lib

" Set encoding
set encoding=UTF-8

" Something
filetype plugin indent on

" Better NERDTree
autocmd VimEnter * if !argc() | Explore | endif
autocmd VimEnter * if isdirectory(expand('<afile>')) | Explore | endif

" PLUGINS: 

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

    " A collection of language packs for Vim.
    " It won't affect your startup time, as scripts are loaded only on demand*.
    " It installs and updates 120+ times faster than the 598 packages it consists of.
    " It is also more secure (scripts loaded for every filetype are generated by vim-polyglot)
    " Best syntax and indentation support (no other features). Hand-selected language packs.
    " Automatically detects indentation (includes performance-optimized version of vim-sleuth, can be disabled)
    Plug 'sheerun/vim-polyglot'

    " This plug-in provides automatic closing of quotes, parenthesis, brackets, etc., besides some other related 
    " features that should make your time in insert mode a little bit easier, like syntax awareness (will not insert 
    " the closing delimiter in comments and other configurable regions), and expansions (off by default), and some more.
    Plug 'raimondi/delimitmate'

    " It's called vim-visual-multi in analogy with visual-block, but the plugin works mostly from normal mode.
    Plug 'mg979/vim-visual-multi', {'branch': 'master'}

    " ALE (Asynchronous Lint Engine) is a plugin providing linting (syntax checking and semantic errors) in NeoVim 0.6.0+
    " and Vim 8.0+ while you edit your text files, and acts as a Vim Language Server Protocol client.
    Plug 'dense-analysis/ale'
    
    " Lean & mean status/tabline for vim that's light as air.
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " Comment stuff out.
    Plug 'tpope/vim-commentary'

    " Surround.vim is all about "surroundings": parentheses, brackets, quotes, XML tags, and more. The plugin provides
    " mappings to easily delete, change and add such surroundings in pairs.
    Plug 'tpope/vim-surround'

    " Tagbar is a Vim plugin that provides an easy way to browse the tags of the current file and get an overview of 
    " its structure. It does this by creating a sidebar that displays the ctags-generated tags of the current file, 
    " ordered by their scope. This means that for example methods in C++ are displayed under the class they are defined in.
    Plug 'preservim/tagbar'

    " Use (neo)vim terminal in the floating/popup window.
    Plug 'voldikss/vim-floaterm'

    Plug 'dyng/ctrlsf.vim'

    " Themes
    Plug 'ajmwagar/vim-deus'
    Plug 'joshdick/onedark.vim'

call plug#end()

" ALE:

let g:ale_fixers = {'cpp':['clangd-16','gcc'],'c':['clangd-16','gcc'],'fortran':['gcc'],'haskel':['ghc'],'lua':['luac'],'nasm':['nasm'],'asm':['gcc'],'zig':['zig fmt']}
let g:ale_linters = {'cpp':['clangd-16','gcc'],'c':['clangd-16','gcc'],'fortran':['gcc'],'haskel':['ghc'],'lua':['luac'],'nasm':['nasm'],'asm':['gcc'],'zig':['zig fmt']}
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_completion_autoimport = 0
let g:ale_completion_enabled = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']

" Airline:

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#ale#enabled = 1

" FloatTerm:

let g:floaterm_keymap_new    = '<C-a>n'
let g:floaterm_keymap_prev   = '<C-a>h'
let g:floaterm_keymap_next   = '<C-a>l'
let g:floaterm_keymap_toggle = '<C-a>t'
let g:floaterm_keymap_kill   = '<C-a>k'

let g:ctrlsf_backend = 'ack'

" Theme:

colorscheme onedark
let g:airline_theme = 'onedark'

" Mappings:

nnoremap ff :20Lex<CR>
nnoremap fz :FloatermNew fzf<CR>
nnoremap tt :Tagbar<CR>
nnoremap tn :Tex .<CR>
nnoremap TT :FloatermNew<CR>
nnoremap Tp :FloatermNew python3<CR>
nnoremap Tl :FloatermNew lua<CR>

command! W :wa 
command! Q :q

" Windows
map <C-H> <C-W>h
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l

" insert mode yank, put, delete and undo
imap <C-Y><C-Y> <C-o>yy
imap <C-D><C-D> <C-o>dd
imap <C-Y>w     <C-o>yw
imap <C-D>w     <C-o>dw
imap <C-P>      <C-o>p
imap <C-U>      <C-o>u

" Other: 

" Enable marker method of folding.
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

" If Vim version is equal to or greater than 7.3 enable undofile.
" This allows you to undo changes to a file even after saving it.
if version >= 703
    set undodir=~/.vim/backup
    set undofile
    set undoreload=10000
endif

" You can split a window into sections by typing `:split` or `:vsplit`.
" Display cursorline and cursorcolumn ONLY in active window.
augroup cursor_off
    autocmd!
    autocmd WinLeave * set nocursorline 
    autocmd WinEnter * set cursorline 
augroup END

" If GUI version of Vim is running set these options.
if has('gui_running')
	
	" Set the background tone.
    set background=dark

	" Hide the toolbar.
    set guioptions-=T

    " Hide the the left-side scroll bar.
    set guioptions-=L

    " Hide the the right-side scroll bar.
    set guioptions-=r

    " Hide the the menu bar.
    set guioptions-=m

    " Hide the the bottom scroll bar.
    set guioptions-=b

    " Map the F4 key to toggle the menu, toolbar, and scroll bar.
    " <Bar> is the pipe character.
    " <CR> is the enter key.
    nnoremap <F4> :if &guioptions=~#'mTr'<Bar>
        \set guioptions-=mTr<Bar>
        \else<Bar>
        \set guioptions+=mTr<Bar>
        \endif<CR>

endif
